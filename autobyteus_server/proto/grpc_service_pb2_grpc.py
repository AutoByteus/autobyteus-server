# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import autobyteus.proto.grpc_service_pb2 as grpc__service__pb2


class AutomatedCodingWorkflowServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartWorkflow = channel.unary_unary(
                '/automatedcodingworkflow.AutomatedCodingWorkflowService/StartWorkflow',
                request_serializer=grpc__service__pb2.StartWorkflowRequest.SerializeToString,
                response_deserializer=grpc__service__pb2.StartWorkflowResponse.FromString,
                )
        self.GetWorkflowConfig = channel.unary_unary(
                '/automatedcodingworkflow.AutomatedCodingWorkflowService/GetWorkflowConfig',
                request_serializer=grpc__service__pb2.GetWorkflowConfigRequest.SerializeToString,
                response_deserializer=grpc__service__pb2.GetWorkflowConfigResponse.FromString,
                )
        self.SetWorkspacePath = channel.unary_unary(
                '/automatedcodingworkflow.AutomatedCodingWorkflowService/SetWorkspacePath',
                request_serializer=grpc__service__pb2.SetWorkspacePathRequest.SerializeToString,
                response_deserializer=grpc__service__pb2.SetWorkspacePathResponse.FromString,
                )


class AutomatedCodingWorkflowServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkflowConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetWorkspacePath(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AutomatedCodingWorkflowServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.StartWorkflow,
                    request_deserializer=grpc__service__pb2.StartWorkflowRequest.FromString,
                    response_serializer=grpc__service__pb2.StartWorkflowResponse.SerializeToString,
            ),
            'GetWorkflowConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkflowConfig,
                    request_deserializer=grpc__service__pb2.GetWorkflowConfigRequest.FromString,
                    response_serializer=grpc__service__pb2.GetWorkflowConfigResponse.SerializeToString,
            ),
            'SetWorkspacePath': grpc.unary_unary_rpc_method_handler(
                    servicer.SetWorkspacePath,
                    request_deserializer=grpc__service__pb2.SetWorkspacePathRequest.FromString,
                    response_serializer=grpc__service__pb2.SetWorkspacePathResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'automatedcodingworkflow.AutomatedCodingWorkflowService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AutomatedCodingWorkflowService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/automatedcodingworkflow.AutomatedCodingWorkflowService/StartWorkflow',
            grpc__service__pb2.StartWorkflowRequest.SerializeToString,
            grpc__service__pb2.StartWorkflowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWorkflowConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/automatedcodingworkflow.AutomatedCodingWorkflowService/GetWorkflowConfig',
            grpc__service__pb2.GetWorkflowConfigRequest.SerializeToString,
            grpc__service__pb2.GetWorkflowConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetWorkspacePath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/automatedcodingworkflow.AutomatedCodingWorkflowService/SetWorkspacePath',
            grpc__service__pb2.SetWorkspacePathRequest.SerializeToString,
            grpc__service__pb2.SetWorkspacePathResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
