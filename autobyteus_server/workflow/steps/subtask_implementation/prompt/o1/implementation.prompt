Analyze the following context given in the [Context] section and complete the specified task given in the [Task] section.

CRITICAL RULES:
1. You MUST preserve and use the complete file paths as provided in the context, including root folder names and intermediate directories. Never truncate or modify the given file paths.
2. All code written within `<file>` tags MUST maintain proper indentation according to the language's conventions.
3. All CDATA sections MUST be correctly closed with the exact ending tag `]]>`. Do NOT omit, alter, or misspell this ending tag under any circumstances.
4. The content of each `<file>` must include the complete file content. Do NOT include placeholders or incomplete code sections such as comments indicating missing code (e.g., `// ... other actions can be added here as needed`). Ensure all code is fully implemented and complete.

Present the final solution following a natural implementation flow. Commands and file changes should be ordered in the sequence they need to be executed, regardless of their type. Use the following format for the solution:

<bash command="your_command_here" description="Brief description of why this command is necessary" />

<file path="path/to/your/file">
<![CDATA[
<complete_file_content>
]]>
</file>

Ensure that:
- Bash commands and file changes are interleaved as needed in the natural sequence.
- Each `<bash>` tag includes a `command` attribute with the command to be executed and a `description` attribute explaining why it is necessary.
- Each `<file>` tag includes a `path` attribute with the full file path and the complete file content within CDATA tags.
- All code maintains proper indentation according to language conventions.
- All CDATA sections are correctly closed with the exact ending tag `]]>`.
- The content of each `<file>` must be complete and fully implemented without placeholders or comments indicating missing code sections.

Example Solutions:

Example 1 (Setting up a new Vue.js component with required dependencies):

<bash command="npm install @vue/composition-api" description="Install Vue Composition API dependency" />

<file path="src/types/todo.ts">
<![CDATA[
export interface Todo {
  id: number;
  text: string;
  completed: boolean;
}
]]>
</file>

<bash command="npm install axios" description="Install HTTP client for API calls" />

<file path="src/services/api.js">
<![CDATA[
import axios from 'axios';

const apiClient = axios.create({
  baseURL: process.env.API_URL,
  headers: {
    'Content-Type': 'application/json'
  }
});

export const userService = {
  async getUser(id) {
    return await apiClient.get(`/users/${id}`);
  }
};
]]>
</file>

<bash command="echo 'API_URL=https://api.example.com' >> .env" description="Configure API endpoint" />

<file path="src/components/TodoList.vue">
<![CDATA[
<template>
  <div class="todo-list">
    <h1>Todo List</h1>
    <div v-if="loading">Loading...</div>
    <div v-else-if="error">Error loading todos</div>
    <div v-else>
      <ul>
        <li v-for="todo in todos" :key="todo.id">
          <input type="checkbox" v-model="todo.completed">
          <span v-text="todo.text"></span>
        </li>
      </ul>
      <div class="new-todo">
        <input v-model="newTodoText" placeholder="Add new todo">
        <button @click="addTodo">Add</button>
      </div>
    </div>
  </div>
</template>

<script lang="ts">
import { defineComponent, ref, onMounted } from 'vue';
import type { Todo } from '@/types/todo';

export default defineComponent({
  name: 'TodoList',
  setup() {
    const todos = ref<Todo[]>([]);
    const loading = ref(true);
    const error = ref('');
    const newTodoText = ref('');

    const loadTodos = async () => {
      try {
        // Simulated data for example
        todos.value = [
          { id: 1, text: 'Learn Vue 3', completed: true },
          { id: 2, text: 'Build an app', completed: false }
        ];
      } catch (e) {
        error.value = 'Failed to load todos';
      } finally {
        loading.value = false;
      }
    };

    const addTodo = () => {
      if (newTodoText.value.trim()) {
        todos.value.push({
          id: Date.now(),
          text: newTodoText.value,
          completed: false
        });
        newTodoText.value = '';
      }
    };

    onMounted(loadTodos);

    return {
      todos,
      loading,
      error,
      newTodoText,
      addTodo
    };
  }
});
</script>

<style scoped>
.todo-list {
  padding: 20px;
}

ul {
  list-style: none;
  padding: 0;
}

li {
  margin: 10px 0;
  display: flex;
  align-items: center;
  gap: 10px;
}

.new-todo {
  margin-top: 20px;
}
</style>
]]>
</file>

Example 2 (Simple file update only):

<file path="src/utils/formatter.ts">
<![CDATA[
export const formatDate = (date: Date): string => {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
};
]]>
</file>

Example 3 (Complex setup with interleaved commands and files):

<bash command="mkdir -p src/database/migrations" description="Create migrations directory" />

<file path="src/database/migrations/001_create_users.sql">
<![CDATA[
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) UNIQUE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
]]>
</file>

<bash command="npm install pg knex" description="Install database dependencies" />
<bash command="createdb myapp_development" description="Create development database" />

<file path="src/database/knexfile.js">
<![CDATA[
module.exports = {
  development: {
    client: 'postgresql',
    connection: {
      database: 'myapp_development',
      user: 'postgres',
      password: 'postgres'
    },
    migrations: {
      directory: './migrations'
    }
  }
};
]]>
</file>

<bash command="npx knex migrate:latest" description="Run database migrations" />

Negative Examples (Common Mistakes to Avoid):

These negative examples are mistakes which should be avoided. They illustrate common errors in CDATA closure and incomplete file content that can lead to malformed XML and parsing issues.

Incorrect Example 1 (Missing CDATA Ending Tag `]]>`):

<file path="src/components/Footer.vue">
<![CDATA[
<template>
  <footer>
    <p>&copy; 2023 My App</p>
  </footer>
</template>

<script>
export default {
  name: 'Footer'
}
</script>

<style scoped>
footer {
  background-color: #333;
  color: #fff;
  padding: 10px;
}
</style>
</file>

Issue: The CDATA section is not properly closed with `]]>`, leading to malformed XML.

Incorrect Example 2 (Incorrect CDATA Ending Tag `]]` Instead of `]]>`):

<file path="src/App.vue">
<![CDATA[
<template>
  <div id="app">
    <Navbar />
    <router-view/>
  </div>
</template>

<script>
import Navbar from './components/Navbar.vue'

export default {
  name: 'App',
  components: {
    Navbar
  }
}
</script>

<style>
#app {
  font-family: 'Roboto', sans-serif;
}
</style>
]]
</file>

Issue: The CDATA section ends with `]]` instead of `]]>`, causing XML parsing errors.

Incorrect Example 3 (Including Placeholders in File Content):

<file path="src/store/actions.js">
<![CDATA[
export const actions = {
  fetchData({ commit }) {
    // Fetch data from API
    // ... other actions can be added here as needed
  }
}
]]>
</file>

Issue: The file content includes a placeholder comment `// ... other actions can be added here as needed` instead of complete, fully implemented code.

[Context]
{{context}}

[Task]
{{requirement}}